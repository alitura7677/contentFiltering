In the field of computer vision , velocity moments are weighted averages of the intensities of pixels in a sequence of images , similar to image moments but in addition to describing an object 's shape also describe its motion through the sequence of images . Velocity moments can be used to aid automated identification of a shape in an image when information about the motion is significant in its description . There are currently two established versions of velocity moments : CartesianJ . D. Shutler , M. S. Nixon , C. J. Harris , Statistical Gait Description via Temporal Moments , Proc . SSIAI 2000 - Austin , Texas , : pp. 291-295 , 2000 and Zernike.J . D. Shutler and M. S. Nixon , Zernike Velocity Moments for Description and Recognition of Moving Shapes , Proc . BMVC 2001 , Manchester , UK , 2:pp. 705-714 , 2001 # Cartesian velocity moments # # Cartesian moments for single images # A Cartesian moment of a single image is calculated by :  mpq = sumx=1M sumy=1N xp yq Pxy  where  M  and  @ @ @ @ @ @ @ @ @ @ Pxy  is the intensity of the pixel at the point  ( x , y )  in the image , and  xp yq  is the basis function . # Cartesian velocity moments for sequences of images # Cartesian velocity moments are based on these Cartesian moments . A Cartesian velocity moment  vmpqmugamma  is defined by :  vmpqmugamma = sumi=2images sumx=1M sumy=1N U ( i , mu , gamma ) C ( i , p , g ) Pixy  where  M  and  N  are again the dimensions of the image ,  images  is the number of images in the sequence , and  Pixy  is the intensity of the pixel at the point  ( x , y )  in image  i  .  C ( i , p , q )  is taken from Central moments , added so the equation is translation invariant , defined as :  C ( i , p , q ) = ( x-overlinexi ) p ( y-overlineyi ) q  where  overlinexi  is @ @ @ @ @ @ @ @ @ @ for image  i  , and similarly for  y  .  U ( i , mu , gamma )  introduces velocity into the equation as :  U ( i , mu , gamma ) = ( overlinexi-overlinexi-1 ) mu ( overlineyi-overlineyi-1 ) gamma  where  overlinexi-1  is the  x  coordinate of the centre of mass for the previous image ,  i-1  , and again similarly for  y  . After the Cartesian velocity moment is calculated , it can be normalised by :  overlinevmpqmugamma = frac vmpqmugammaA * I  where  A  is the average area of the object , in pixels , and  I  is the number of images . Now the value is not affected by the number of images in the sequence or the size of the object . As Cartesian moments are non-orthogonal , so are Cartesian velocity moments , so different moments can be closely correlated . These velocity moments do however provide translation and scale invariance ( unless the scale changes within the sequence of images ) . @ @ @ @ @ @ @ @ @ @ images # A Zernike moment of a single image is calculated by :  Amn = frac m + 1pi sumx sumy Vmn ( r , theta ) * Pxy  where  *  denotes the complex conjugate ,  m  is an integer between  0  and  infty  , and  n  is an integer such that  m - n  is even and  n **10;257747; . For calculating Zernike moments , the image , or section of the image which is of interest is mapped to the unit disc , then  Pxy  is the intensity of the pixel at the point  ( x , y )  on the disc and  x2 + y2 le 1  is a restriction on values of  x  and  y  . The coordinates are then mapped to polar coordinates , and  r  and  theta  are the polar coordinates of the point  ( x , y )  on the unit disc map .  Vmn ( r , theta )  is @ @ @ @ @ @ @ @ @ @ Vmn ( r , theta ) = Rmn(r)ejntheta  :  Rmn(r) = sums=0frac m-n2 ( -1 ) s F ( m , n , s , r )  :  F ( m , n , s , r ) = frac ( m-s ) ! s ! ( frac m+n2-s ) ! ( frac m-n2-s ) ! rm-2s  # Zernike velocity moments for sequences of images # Zernike velocity moments are based on these Zernike moments . A Zernike velocity moment  Amnmugamma  is defined by :  Amnmugamma = frac m + 1pi sumi=2images sumx=1 sumy=1 U ( i , mu , gamma ) Vmn ( r , theta ) * Pixy  where  images  is again the number of images in the sequence , and  Pixy  is the intensity of the pixel at the point  ( x , y )  on the unit disc mapped from image  i  .  U ( i , mu , gamma )  introduces velocity into the equation in the same way as in the Cartesian velocity moments and  @ @ @ @ @ @ @ @ @ @ the Zernike moments equation above . Like the Cartesian velocity moments , Zernike velocity moments can be normalised by :  overlineAmnmugamma = frac AmnmugammaA * I  where  A  is the average area of the object , in pixels , and  I  is the number of images . As Zernike velocity moments are based on the orthogonal Zernike moments , they produce less correlated and more compact descriptions than Cartesian velocity moments . Zernike velocity moments also provide translation and scale invariance ( even when the scale changes within the sequence ) . # Comparison of methods # # References #  